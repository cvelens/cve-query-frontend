from flask import render_template, request, redirect, url_for, flash, jsonify
from flask_login import login_user, login_required, logout_user, current_user
from app import app, db
from app.models import User, Query
from werkzeug.security import generate_password_hash

@app.route('/')
@app.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('query'))
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=username).first()
        if user and user.check_password(password):
            login_user(user)
            return redirect(url_for('query'))
        else:
            flash('Invalid username or password')
    return render_template('login.html')

@app.route('/signup', methods=['GET', 'POST'])
def signup():
    if current_user.is_authenticated:
        return redirect(url_for('query'))
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        if User.query.filter_by(username=username).first():
            flash('Username already exists')
        else:
            new_user = User(username=username)
            new_user.set_password(password)
            db.session.add(new_user)
            db.session.commit()
            flash('Account created successfully')
            return redirect(url_for('login'))
    return render_template('signup.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

@app.route('/query', methods=['GET', 'POST'])
@login_required
def query():
    if request.method == 'POST':
        query_text = request.form['query']
        # Simulate backend response
        mock_response = f"Mock response for query: {query_text}"
        # Save query to database
        new_query = Query(user_id=current_user.id, query=query_text, response=mock_response)
        db.session.add(new_query)
        db.session.commit()
        
        if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
            return jsonify({'query': query_text, 'response': mock_response})
        else:
            return render_template('query.html', response=mock_response)
    
    user_queries = db.session.query(Query).filter(Query.user_id == current_user.id).order_by(Query.timestamp.desc()).limit(10).all()
    return render_template('query.html', history=user_queries)

@app.route('/history')
@login_required
def history():
    user_queries = Query.query.filter_by(user_id=current_user.id).order_by(Query.timestamp.desc()).all()
    return render_template('history.html', history=user_queries)